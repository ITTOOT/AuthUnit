"""
Django settings for AuthorizationUnit project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import json
from pathlib import Path

# Added
import datetime
import os
import configparser

# CONFIG
#config = configparser.ConfigParser()
#config.read('AuthorizationUnit/pg_config.cnf')

# Load the configuration from a separate file
with open('AuthorizationUnit/pg_config.json') as f:
    config = json.load(f)

# Get the PostgreSQL configuration from the loaded config
postgresql_config = config['postgresql']

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i(8=v12o+5ae&p3espt33as0t4a9cv9m4pdol$-aw*0*%4=o$$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '*', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    # Added
    'core',
    'AuthorizationUnit',
    'mod_wsgi.server',
    'rest_framework',
    'rest_framework_jwt',
    'ratelimit',
    # Default
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    # Added
    'core.jwt.jwtMiddleware.JWTAuthMiddleware',
    # Default
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'AuthorizationUnit.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AuthorizationUnit.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': config['postgresql']['host'],
        'PORT': config['postgresql']['port'],
        'NAME': config['postgresql']['database'],
        'USER': config['postgresql']['username'],
        'PASSWORD': config['postgresql']['password'],
    },
}
# Configure the test database - Using the default database config
test_postgresql_config = postgresql_config.copy()
test_postgresql_config['database'] = 'djangotestdatabase'
DATABASES['default']['TEST'] = test_postgresql_config

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'core.controllers.authBackend.JWTAuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Configure the JWT settings
JWT_AUTH = {
    'JWT_SECRET_KEY': 'your-secret-key',  # Replace with your own secret key
    'JWT_ALGORITHM': 'HS256',
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=30),
}

# Add the JWT authentication middleware
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ],
}



# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Cashes
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    },
    # 'database': {
    #     'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
    # },
    # 'filesystem': {
    #     'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
    # },
    # 'redis': {
    #     'BACKEND': 'django_redis.cache.RedisCache',
    # },
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
